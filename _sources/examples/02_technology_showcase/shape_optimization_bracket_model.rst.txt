
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/02_technology_showcase/shape_optimization_bracket_model.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_02_technology_showcase_shape_optimization_bracket_model.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_02_technology_showcase_shape_optimization_bracket_model.py:

.. _ref_shape_optimization:

Shape Optimization of a Bracket
-------------------------------

This example demonstrates how to insert a Static Structural analysis
into a new Mechanical session and execute a sequence of Python scripting
commands that define and solve a shape optimization analysis of bracket.
Scripts then evaluate the following results: deformation and
optimized shape.

.. GENERATED FROM PYTHON SOURCE LINES 34-50

.. code-block:: Python


    ## %%
    # Import the necessary libraries
    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    from pathlib import Path
    from typing import TYPE_CHECKING

    from ansys.mechanical.core import App
    from ansys.mechanical.core.examples import delete_downloads, download_file
    from matplotlib import image as mpimg
    from matplotlib import pyplot as plt

    if TYPE_CHECKING:
        import Ansys








.. GENERATED FROM PYTHON SOURCE LINES 51-53

Initialize the embedded application
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. GENERATED FROM PYTHON SOURCE LINES 53-57

.. code-block:: Python


    app = App(globals=globals())
    print(app)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Ansys Mechanical [Ansys Mechanical Enterprise]
    Product Version:252
    Software build date: 06/13/2025 11:25:56





.. GENERATED FROM PYTHON SOURCE LINES 58-60

Create functions to set camera and display images
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. GENERATED FROM PYTHON SOURCE LINES 60-102

.. code-block:: Python


    # Set the path for the output files (images, gifs, mechdat)
    output_path = Path.cwd() / "out"


    def display_image(
        image_path: str,
        pyplot_figsize_coordinates: tuple = (16, 9),
        plot_xticks: list = [],
        plot_yticks: list = [],
        plot_axis: str = "off",
    ) -> None:
        """Display the image with the specified parameters.

        Parameters
        ----------
        image_path : str
            The path to the image file to display.
        pyplot_figsize_coordinates : tuple
            The size of the figure in inches (width, height).
        plot_xticks : list
            The x-ticks to display on the plot.
        plot_yticks : list
            The y-ticks to display on the plot.
        plot_axis : str
            The axis visibility setting ('on' or 'off').
        """
        # Set the figure size based on the coordinates specified
        plt.figure(figsize=pyplot_figsize_coordinates)
        # Read the image from the file into an array
        image_path = str(output_path / image_path)
        plt.imshow(mpimg.imread(image_path))
        # Get or set the current tick locations and labels of the x-axis
        plt.xticks(plot_xticks)
        # Get or set the current tick locations and labels of the y-axis
        plt.yticks(plot_yticks)
        # Turn off the axis
        plt.axis(plot_axis)
        # Display the figure
        plt.show()









.. GENERATED FROM PYTHON SOURCE LINES 103-105

Configure graphics for image export
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. GENERATED FROM PYTHON SOURCE LINES 105-125

.. code-block:: Python


    # Define the graphics and camera
    graphics = app.Graphics
    camera = graphics.Camera

    # Set the camera orientation to the isometric view and set the camera to fit the model
    camera.SetSpecificViewOrientation(ViewOrientationType.Iso)
    camera.SetFit()

    # Set the image export format and settings
    image_export_format = GraphicsImageExportFormat.PNG
    settings_720p = Ansys.Mechanical.Graphics.GraphicsImageExportSettings()
    settings_720p.Resolution = (
        Ansys.Mechanical.DataModel.Enums.GraphicsResolutionType.EnhancedResolution
    )
    settings_720p.Background = Ansys.Mechanical.DataModel.Enums.GraphicsBackgroundType.White
    settings_720p.Width = 1280
    settings_720p.Height = 720
    settings_720p.CurrentGraphicsDisplay = False








.. GENERATED FROM PYTHON SOURCE LINES 126-128

Download the required files
~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. GENERATED FROM PYTHON SOURCE LINES 128-132

.. code-block:: Python


    # Download the geometry file
    geometry_path = download_file("bracket_model.agdb", "pymechanical", "embedding")








.. GENERATED FROM PYTHON SOURCE LINES 133-135

Import the geometry
~~~~~~~~~~~~~~~~~~~

.. GENERATED FROM PYTHON SOURCE LINES 135-162

.. code-block:: Python


    # Define the model
    model = app.Model

    # Add the geometry import to the geometry import group
    geometry_import_group = model.GeometryImportGroup
    geometry_import = geometry_import_group.AddGeometryImport()

    # Set the geometry import format and settings
    geometry_import_format = (
        Ansys.Mechanical.DataModel.Enums.GeometryImportPreference.Format.Automatic
    )
    geometry_import_preferences = Ansys.ACT.Mechanical.Utilities.GeometryImportPreferences()
    geometry_import_preferences.ProcessNamedSelections = True
    geometry_import_preferences.NamedSelectionKey = ""
    geometry_import_preferences.ProcessMaterialProperties = True
    geometry_import_preferences.ProcessCoordinateSystems = True

    # Import the geometry with the specified settings
    geometry_import.Import(
        geometry_path, geometry_import_format, geometry_import_preferences
    )

    # Visualize the model in 3D
    app.plot()









.. tab-set::



   .. tab-item:: Static Scene



            
     .. image-sg:: /examples/02_technology_showcase/images/sphx_glr_shape_optimization_bracket_model_001.png
        :alt: shape optimization bracket model
        :srcset: /examples/02_technology_showcase/images/sphx_glr_shape_optimization_bracket_model_001.png
        :class: sphx-glr-single-img
     


   .. tab-item:: Interactive Scene



       .. offlineviewer:: /__w/pymechanical-embedding-examples/pymechanical-embedding-examples/doc/source/examples/02_technology_showcase/images/sphx_glr_shape_optimization_bracket_model_001.vtksz



.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    []



.. GENERATED FROM PYTHON SOURCE LINES 163-166

Define Named Selections
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Specify variables for named selection objects

.. GENERATED FROM PYTHON SOURCE LINES 166-177

.. code-block:: Python


    NS_GRP = ExtAPI.DataModel.Project.Model.NamedSelections
    BOUNDARY_COND_NS = [
        x for x in ExtAPI.DataModel.Tree.AllObjects if x.Name == "boundary_cond"
    ][0]
    LOADING_NS = [x for x in ExtAPI.DataModel.Tree.AllObjects if x.Name == "loading"][0]
    EXCLUSON_REGION_NS = [
        x for x in ExtAPI.DataModel.Tree.AllObjects if x.Name == "exclusion_region"
    ][0]
    BRACKET_NS = [x for x in ExtAPI.DataModel.Tree.AllObjects if x.Name == "bracket"][0]








.. GENERATED FROM PYTHON SOURCE LINES 178-180

Define the mesh settings and generate the mesh
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. GENERATED FROM PYTHON SOURCE LINES 180-206

.. code-block:: Python



    mesh = app.Model.Mesh
    automatic_method = mesh.AddAutomaticMethod()
    automatic_method.ScopingMethod = GeometryDefineByType.Component

    selection = NS_GRP.Children[3]
    automatic_method.Location = selection
    automatic_method.Method = MethodType.AllTriAllTet
    automatic_method.ElementOrder = ElementOrder.Linear

    sizing = mesh.AddSizing()
    sizing.ScopingMethod = GeometryDefineByType.Component
    selection = NS_GRP.Children[3]
    sizing.Location = selection
    sizing.ElementSize = Quantity(6e-3, "m")

    mesh.GenerateMesh()

    # Display mesh

    app.Tree.Activate([mesh])
    camera.SetFit()
    graphics.ExportImage(str(output_path / "mesh.png"), image_export_format, settings_720p)
    display_image("mesh.png")




.. image-sg:: /examples/02_technology_showcase/images/sphx_glr_shape_optimization_bracket_model_002.png
   :alt: shape optimization bracket model
   :srcset: /examples/02_technology_showcase/images/sphx_glr_shape_optimization_bracket_model_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 207-210

Define Analysis
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Add Structural analysis

.. GENERATED FROM PYTHON SOURCE LINES 210-214

.. code-block:: Python


    model = app.Model
    static_structural_analysis = model.AddStaticStructuralAnalysis()








.. GENERATED FROM PYTHON SOURCE LINES 215-217

Define loads and boundary conditions
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. GENERATED FROM PYTHON SOURCE LINES 217-228

.. code-block:: Python


    fixed_support = static_structural_analysis.AddFixedSupport()
    selection = NS_GRP.Children[0]
    fixed_support.Location = selection

    force = static_structural_analysis.AddForce()
    selection = NS_GRP.Children[1]
    force.Location = selection
    force.DefineBy = LoadDefineBy.Components
    force.ZComponent.Output.SetDiscreteValue(0, Quantity(25000, "N"))








.. GENERATED FROM PYTHON SOURCE LINES 229-231

Analysis settings
~~~~~~~~~~~~~~~~~

.. GENERATED FROM PYTHON SOURCE LINES 231-234

.. code-block:: Python


    solution = static_structural_analysis.Solution








.. GENERATED FROM PYTHON SOURCE LINES 235-237

Insert results
~~~~~~~~~~~~~~

.. GENERATED FROM PYTHON SOURCE LINES 237-240

.. code-block:: Python


    total_deformation = solution.AddTotalDeformation()








.. GENERATED FROM PYTHON SOURCE LINES 241-243

Solve
~~~~~

.. GENERATED FROM PYTHON SOURCE LINES 243-247

.. code-block:: Python


    solution.Solve(True)
    solution_status = solution.Status








.. GENERATED FROM PYTHON SOURCE LINES 251-253

Show messages
~~~~~~~~~~~~~

.. GENERATED FROM PYTHON SOURCE LINES 253-258

.. code-block:: Python


    # Print all messages from Mechanical
    app.messages.show()






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Severity: Warning
    DisplayString: Linear Tetrahedral elements have been used in regions with linear materials. This is not recommended. Please consider changing your mesh settings to use a different element type in these regions.
    Severity: Info
    DisplayString: The requested license was received from the License Manager after 37 seconds.




.. GENERATED FROM PYTHON SOURCE LINES 259-262

Results
~~~~~~~
Total deformation

.. GENERATED FROM PYTHON SOURCE LINES 262-270

.. code-block:: Python


    app.Tree.Activate([total_deformation])
    camera.SetFit()
    graphics.ExportImage(
        str(output_path / "total_deformation.png"), image_export_format, settings_720p
    )
    display_image("total_deformation.png")




.. image-sg:: /examples/02_technology_showcase/images/sphx_glr_shape_optimization_bracket_model_003.png
   :alt: shape optimization bracket model
   :srcset: /examples/02_technology_showcase/images/sphx_glr_shape_optimization_bracket_model_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 271-274

Define Analysis
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Add Topology Optimization Analysis

.. GENERATED FROM PYTHON SOURCE LINES 274-278

.. code-block:: Python


    topology_optimization = model.AddTopologyOptimizationAnalysis()
    topology_optimization.ImportLoad(static_structural_analysis)








.. GENERATED FROM PYTHON SOURCE LINES 279-282

Define Optimization Settings
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Specify the shape optimization region

.. GENERATED FROM PYTHON SOURCE LINES 282-299

.. code-block:: Python


    optimization_region = DataModel.GetObjectsByType(
        DataModelObjectCategory.OptimizationRegion
    )[0]
    selection = NS_GRP.Children[3]
    optimization_region.DesignRegionLocation = selection
    optimization_region.ExclusionScopingMethod = GeometryDefineByType.Component
    selection = NS_GRP.Children[2]
    optimization_region.ExclusionRegionLocation = selection

    optimization_region.OptimizationType = OptimizationType.Shape
    optimization_region.ShapeMoveLimitControl = TopoPropertyControlType.Manual
    optimization_region.MorphingIterationMoveLimit = 0.002
    optimization_region.MaxCumulatedDisplacementControl = TopoPropertyControlType.Manual
    optimization_region.MorphingTotalMoveLimit = 0.02
    optimization_region.MeshDeformationToleranceControl = TopoPropertyControlType.Manual








.. GENERATED FROM PYTHON SOURCE LINES 300-303

Define Objective
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Specify objective as minimizing volume

.. GENERATED FROM PYTHON SOURCE LINES 303-307

.. code-block:: Python


    objective_type = DataModel.GetObjectsByType(DataModelObjectCategory.Objective)[0]
    objective_type.Worksheet.SetObjectiveType(0, ObjectiveType.MinimizeVolume)








.. GENERATED FROM PYTHON SOURCE LINES 308-311

Define Compliance Settings
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Specify compliance as response constraint

.. GENERATED FROM PYTHON SOURCE LINES 311-318

.. code-block:: Python


    compliance_constraint = topology_optimization.AddComplianceConstraint()
    compliance_constraint.ComplianceLimit.Output.SetDiscreteValue(0, Quantity(0.27, "J"))

    mass_constraint = DataModel.GetObjectsByName("Response Constraint")
    DataModel.Remove(mass_constraint)








.. GENERATED FROM PYTHON SOURCE LINES 319-321

Analysis settings
~~~~~~~~~~~~~~~~~

.. GENERATED FROM PYTHON SOURCE LINES 321-323

.. code-block:: Python

    topo_solution = topology_optimization.Solution








.. GENERATED FROM PYTHON SOURCE LINES 324-326

Insert results
~~~~~~~~~~~~~~

.. GENERATED FROM PYTHON SOURCE LINES 326-330

.. code-block:: Python


    # Topology_Density = SOLN.AddTopologyDensity()
    topology_density = DataModel.GetObjectsByName("Topology Density")[0]








.. GENERATED FROM PYTHON SOURCE LINES 331-333

Solve: shape Optimization Simulation
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. GENERATED FROM PYTHON SOURCE LINES 333-338

.. code-block:: Python


    topo_solution.Solve(True)
    topo_solution_status = topo_solution.Status









.. GENERATED FROM PYTHON SOURCE LINES 342-344

Show messages
~~~~~~~~~~~~~

.. GENERATED FROM PYTHON SOURCE LINES 344-348

.. code-block:: Python


    # Print all messages from Mechanical
    app.messages.show()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Severity: Info
    DisplayString: For geometric objective (Mass or Volume), it is recommended to use Criterion of the upstream Measure folder (inserted from Model object).
    Severity: Warning
    DisplayString: Linear Tetrahedral elements have been used in regions with linear materials. This is not recommended. Please consider changing your mesh settings to use a different element type in these regions.
    Severity: Info
    DisplayString: The requested license was received from the License Manager after 37 seconds.




.. GENERATED FROM PYTHON SOURCE LINES 349-352

Results
~~~~~~~
Topology Density

.. GENERATED FROM PYTHON SOURCE LINES 352-361

.. code-block:: Python


    app.Tree.Activate([topology_density])
    camera.SetFit()
    graphics.ExportImage(
        str(output_path / "topology_density.png"), image_export_format, settings_720p
    )
    display_image("topology_density.png")





.. image-sg:: /examples/02_technology_showcase/images/sphx_glr_shape_optimization_bracket_model_004.png
   :alt: shape optimization bracket model
   :srcset: /examples/02_technology_showcase/images/sphx_glr_shape_optimization_bracket_model_004.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 362-365

Cleanup
~~~~~~~
Save project

.. GENERATED FROM PYTHON SOURCE LINES 365-374

.. code-block:: Python


    mechdat_file = output_path / "shape-optimization.mechdat"
    app.save(str(mechdat_file))

    # Close the app
    app.close()

    # delete example file
    delete_downloads()




.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    True




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (3 minutes 5.935 seconds)


.. _sphx_glr_download_examples_02_technology_showcase_shape_optimization_bracket_model.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: shape_optimization_bracket_model.ipynb <shape_optimization_bracket_model.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: shape_optimization_bracket_model.py <shape_optimization_bracket_model.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: shape_optimization_bracket_model.zip <shape_optimization_bracket_model.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
